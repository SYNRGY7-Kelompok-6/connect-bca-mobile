name: Build, Test, & Deploy

on:
  push:
    branches:
      - cicd-test
  pull_request:
    branches:
      - cicd-test
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Ensure bump-version.sh is executable
        run: chmod +x ./bump-version.sh

      - name: Create results directory structure
        run: mkdir -p results/release results/test-results results/outputs

      - name: Decode Google Services JSON
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $GOOGLE_SERVICES_JSON > app/google-services.json

      - name: Get latest release version
        id: get_latest_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name | sed 's/v//')
          if [ -z "$latest_release" ]; then
            latest_release="0.0.0"
          fi
          echo "latest_release=$latest_release" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ env.latest_release }}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          new_version="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Debug version
        run: |
          echo "Latest release version is ${{ env.latest_release }}"
          echo "New version is ${{ env.new_version }}"

      - name: Run bump-version.sh
        run: ./bump-version.sh

      - name: Stage changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
          fi

      - name: Commit version bump
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -m "Bump version to ${{ env.new_version }}"
            git push
          fi

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Clean and Build Release APK
        run: |
          ./gradlew clean assembleRelease --stacktrace
          mkdir -p results/release
          cp app/release/app-release.apk results/release/
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

      - name: Upload Crashlytics Mapping File
        run: ./gradlew :app:uploadCrashlyticsMappingFileRelease
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

      - name: Check build output
        run: ls -R results

      - name: Verify APK file
        run: |
          if [ -f results/release/app-release.apk ]; then
            echo "APK file exists"
          else
            echo "APK file does not exist"
            exit 1
          fi

      - name: Upload and Distribute App to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: tester
          file: results/release/app-release.apk
          releaseNotes: |
            Changes in this build:
            - ${{ github.event.head_commit.message }}
          versionName: ${{ env.new_version }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./results/release/app-release.apk
          asset_name: app-release-${{ env.new_version }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: ./results/release/app-release.apk

      - name: Copy Test Results
        if: always()
        run: |
          if [ ! -d "./results/test-results" ]; then
            mkdir -p ./results/test-results
          fi
          if [ -d "app/build/test-results" ]; then
            cp -R app/build/test-results/* ./results/test-results/
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: ./results/test-results

      - name: Copy Build Outputs
        if: failure()
        run: |
          if [ ! -d "./results/outputs" ]; then
            mkdir -p ./results/outputs
          fi
          if [ -d "app/build/outputs" ]; then
            cp -R app/build/outputs/* ./results/outputs/
          fi

      - name: Upload build outputs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-outputs
          path: ./results/outputs